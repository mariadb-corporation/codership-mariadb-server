--source include/galera_cluster.inc
--source include/have_innodb.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc

#
# Test that a local LOCK TABLE will NOT be broken by an incoming remote transaction against that table
#

CREATE TABLE t1 (f1 INTEGER PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 values (1);
--let $wsrep_local_bf_aborts_before = `SELECT VARIABLE_VALUE FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_local_bf_aborts'`
LOCK TABLE t1 WRITE;

#
# Set sync point
#
--connect node_1_ctrl, 127.0.0.1, root, , test, $NODE_MYPORT_1
--connection node_1_ctrl
SET SESSION wsrep_sync_wait = 0;
SET DEBUG_SYNC= 'wsrep_before_mdl_wait SIGNAL before_mdl_wait WAIT_FOR mdl_wait_continue';
--send INSERT INTO t1 VALUES (2);

--connection node_1
--echo # Wait until INSERT is blocked before MDL lock wait
SET DEBUG_SYNC= 'now WAIT_FOR before_mdl_wait';
# INSERT should wait for MDL-lock instead of BF aborting LOCK TABLE
SELECT COUNT(*) AS EXPECT_1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE LIKE 'debug sync point: wsrep_before_mdl_wait%';
SET DEBUG_SYNC = 'now SIGNAL mdl_wait_continue';

--connection node_1
# Release INSERT
UNLOCK TABLES;
COMMIT;

--connection node_1_ctrl
--reap
SELECT COUNT(*) AS EXPECT_2 FROM t1;

--connection node_2
SELECT COUNT(*) AS EXPECT_2 FROM t1;

--let $wsrep_local_bf_aborts_after = `SELECT VARIABLE_VALUE FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_local_bf_aborts'`

--disable_query_log
--eval SELECT $wsrep_local_bf_aborts_after - $wsrep_local_bf_aborts_before AS wsrep_local_aborts_increment;
--enable_query_log

DROP TABLE t1;
